#!/usr/bin/env python3

import subprocess
import re
from collections import namedtuple

from pynput import mouse

def shell(command: str) -> str:
	proc = subprocess.run(command, cwd=None, shell=True, capture_output=True)
	if proc.returncode == 0:
		return proc.stdout.decode("utf-8").strip()
	else:
		raise EnvironmentError(
			f"The command [{command}]\nfailed with return code {proc.returncode}.\n"
			f"stderr:\n{proc.stderr.decode('utf-8')}")

Device = namedtuple("Device", ["name", "id", "type"])
Point = namedtuple("Point", ["x", "y"])

def wacom_devices() -> list[Device]:
	raw = shell("xsetwacom list devices")
	for line in raw.split("\n"):
		pattern = re.compile(r"(.*)\s+id: (\d+)\s+type: (\w+)")
		groups = pattern.match(line).groups()
		yield Device(groups[0].strip(), groups[1], groups[2])

stylus = [d for d in wacom_devices() if d.type == "STYLUS"][0]

with mouse.Events() as events:
	for event in events:
		if type(event) is not mouse.Events.Click:
			continue
		if event.button != mouse.Button.left:
			continue
		if event.pressed:
			start = Point(event.x, event.y)
		if not event.pressed:
			x0 = min(start.x, event.x)
			y0 = min(start.y, event.y)
			width = max(start.x, event.x) - x0
			height = max(start.y, event.y) - y0
			
			output = shell(f"xsetwacom -x set {stylus.id} MapToOutput {width}x{height}+{x0}+{y0}")
			break
